# =============================================================================
# Feature Auth Platform - Environment Configuration
# =============================================================================
# Copy this file to .env and update all values marked with "CHANGE_ME" or "REPLACE"
# See docs/CONFIGURATION.md for detailed explanations
# =============================================================================

# -----------------------------------------------------------------------------
# Database Configuration
# -----------------------------------------------------------------------------
# IMPORTANT: Use PostgreSQL in production, not SQLite!
# Development (SQLite):
# DATABASE_URL=sqlite:///./data/auth.db

# Production (PostgreSQL):
DATABASE_URL=postgresql://user:CHANGE_ME_PASSWORD@localhost:5432/feature_auth
DATABASE_ECHO=false

# -----------------------------------------------------------------------------
# Redis Configuration
# -----------------------------------------------------------------------------
# Used for caching, rate limiting, and Celery broker
REDIS_URL=redis://localhost:6379/0

# Rate limiting settings
REDIS_RATE_LIMIT_PREFIX=rate_limit
RATE_LIMIT_DEFAULT_REQUESTS=60
RATE_LIMIT_DEFAULT_WINDOW_SECONDS=60
RATE_LIMIT_ALLOWLIST=  # Comma-separated IPs to whitelist (optional)
RATE_LIMIT_DENYLIST=  # Comma-separated IPs to block (optional)

# -----------------------------------------------------------------------------
# JWT Configuration (ES256 Keys)
# -----------------------------------------------------------------------------
# ⚠️ CRITICAL: Generate new ES256 keys for production!
# Generate using:
# python scripts/generate_jwt_keys.py
# or use: https://mkjwk.org/ (select ES256, P-256)

JWT_JWK_CURRENT={"kty":"EC","crv":"P-256","x":"REPLACE_ME","y":"REPLACE_ME","d":"REPLACE_ME","kid":"2025-01"}
JWT_JWK_NEXT=  # For key rotation (optional)
JWT_JWK_PREVIOUS=  # For grace period during rotation (optional)

JWT_PREVIOUS_GRACE_SECONDS=86400  # 24 hours
JWT_ACCESS_TTL_SECONDS=420  # 7 minutes (per spec)
JWT_REFRESH_TTL_SECONDS=2592000  # 30 days (per spec)
JWT_ISSUER=feature-auth
JWT_AUDIENCE=feature-auth-clients

# -----------------------------------------------------------------------------
# Password Hashing (Argon2id)
# -----------------------------------------------------------------------------
# Production-recommended values per spec
ARGON2_TIME_COST=3
ARGON2_MEMORY_COST=65536  # 64 MB
ARGON2_PARALLELISM=2
ARGON2_HASH_LEN=32

# -----------------------------------------------------------------------------
# Cloudflare Turnstile CAPTCHA
# -----------------------------------------------------------------------------
# ⚠️ MUST CHANGE: Get keys from https://dash.cloudflare.com/
# Development (test key - always passes):
TURNSTILE_SECRET_KEY=1x0000000000000000000000000000000AA

# Production:
# TURNSTILE_SECRET_KEY=0x4AAAAAAAA_YOUR_SECRET_KEY_HERE
TURNSTILE_VERIFY_URL=https://challenges.cloudflare.com/turnstile/v0/siteverify

# For frontend (.env in frontend/ directory):
# VITE_TURNSTILE_SITE_KEY=0x4AAAAAAAA_YOUR_SITE_KEY_HERE

# -----------------------------------------------------------------------------
# Email / SMTP Configuration
# -----------------------------------------------------------------------------
# ⚠️ MUST CHANGE: Configure production SMTP provider

# Development (local SMTP - emails won't actually send):
SMTP_HOST=localhost
SMTP_PORT=1025
SMTP_USE_TLS=false
SMTP_USER=
SMTP_PASS=

# Production examples:
# AWS SES:
# SMTP_HOST=email-smtp.us-east-1.amazonaws.com
# SMTP_PORT=587
# SMTP_USE_TLS=true
# SMTP_USER=AKIAIOSFODNN7EXAMPLE
# SMTP_PASS=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY

# SendGrid:
# SMTP_HOST=smtp.sendgrid.net
# SMTP_PORT=587
# SMTP_USE_TLS=true
# SMTP_USER=apikey
# SMTP_PASS=SG.YOUR_SENDGRID_API_KEY

EMAIL_FROM_ADDRESS=noreply@localhost
EMAIL_FROM_NAME=Feature Auth Dev

# Production:
# EMAIL_FROM_ADDRESS=noreply@yourcompany.com
# EMAIL_FROM_NAME=YourCompany

# -----------------------------------------------------------------------------
# Celery Configuration
# -----------------------------------------------------------------------------
# Uses Redis as broker and result backend
CELERY_BROKER_URL=redis://localhost:6379/1
CELERY_RESULT_BACKEND=redis://localhost:6379/1

# -----------------------------------------------------------------------------
# URLs
# -----------------------------------------------------------------------------
# Development:
FRONTEND_BASE_URL=http://localhost:5173
API_BASE_URL=http://localhost:8000

# Production:
# FRONTEND_BASE_URL=https://app.yourcompany.com
# API_BASE_URL=https://api.yourcompany.com

# -----------------------------------------------------------------------------
# Email Verification Secret
# -----------------------------------------------------------------------------
# ⚠️ MUST CHANGE: Generate random secret
# Generate using: python -c "import secrets; print(secrets.token_urlsafe(32))"
EMAIL_VERIFICATION_SECRET=REPLACE_WITH_RANDOM_32_BYTE_SECRET

# -----------------------------------------------------------------------------
# Admin Account
# -----------------------------------------------------------------------------
# ⚠️ MUST CHANGE: Set strong admin credentials for production!
# This account is created automatically on first migration
ADMIN_EMAIL=admin@localhost
ADMIN_PASSWORD=admin123  # CHANGE IN PRODUCTION! Min 12 chars

# -----------------------------------------------------------------------------
# Encryption Keys (for MFA secrets & recovery codes)
# -----------------------------------------------------------------------------
# ⚠️ CRITICAL: Generate new keys for production!
# Generate using: python -c "import secrets, base64; print(base64.urlsafe_b64encode(secrets.token_bytes(32)).decode())"

ENCRYPTION_KEYS={"v1":"REPLACE_WITH_32_BYTE_BASE64_KEY"}
ENCRYPTION_KEY_ACTIVE=v1

# Example:
# ENCRYPTION_KEYS={"v1":"7x9Kj3mN8qR5tY2wE4uI1oP6aS0dF-gH_zX5cV7bN9M="}

# -----------------------------------------------------------------------------
# Observability (OpenTelemetry & Prometheus)
# -----------------------------------------------------------------------------
# Optional - for production monitoring
OTEL_EXPORTER_OTLP_ENDPOINT=  # http://localhost:4318
OTEL_EXPORTER_OTLP_INSECURE=true

SERVICE_NAME=auth
SERVICE_VERSION=0.1.0
SERVICE_REGION=us-east-1

# Prometheus metrics exposed at /metrics
PROMETHEUS_SCRAPE=1

# -----------------------------------------------------------------------------
# Logging
# -----------------------------------------------------------------------------
LOG_LEVEL=INFO  # DEBUG, INFO, WARNING, ERROR
LOG_REDACT_FIELDS=password,token,secret,captcha,otp,recovery_code

# -----------------------------------------------------------------------------
# Environment
# -----------------------------------------------------------------------------
ENVIRONMENT=development  # development, staging, production
DEBUG=false  # Set to true only in local development

# =============================================================================
# ORCHESTRATOR SETTINGS (Existing - not required for auth)
# =============================================================================

# App Configuration
APP_PORT=3000
DB_PATH=./data/orchestrator.db

# LLM API Keys (for orchestrator features)
OPENAI_API_KEY=changeme
OPENAI_BASE_URL=https://api.openai.com/v1
ANTHROPIC_API_KEY=changeme
MODEL_CTO=gpt-4.1-mini
MODEL_CODER=gpt-4.1

# GitHub Integration
GITHUB_TOKEN=ghp_xxx
GITHUB_OWNER=YourUserOrOrg
GITHUB_REPO=YourRepo

# Budget Controls
BUDGET_USD_MAX=5.00
MAX_REQUESTS=300
MAX_WALLCLOCK_MINUTES=720

# Safety Settings
ALLOW_DIRECT_PUSH=0
ALLOW_UNSAFE_AUTOMERGE=0
MERGE_CONFLICT_BEHAVIOR=pr
DRY_RUN=0

# Context Engine
CONTEXT_ENGINE_ENABLED=true
EMBEDDING_MODEL=text-embedding-3-large
CONTEXT_BUDGET_TOKENS=64000
CONTEXT_OUTPUT_RESERVE_TOKENS=8000
CONTEXT_HARD_CAP_TOKENS=70000
CONTEXT_COMPACT_THRESHOLD_RATIO=0.6
MEMORY_MAX_ITEMS_PER_JOB=2000
MEMORY_MAX_BYTES_PER_ITEM=20000
RETRIEVER_MAX_FILES=200
RETRIEVER_MAX_SNIPPET_TOKENS=2000
JIT_ENABLE=true
CURATOR_TOPK=12
CURATOR_MIN_SCORE=0.12

# Multi-LLM Routing
LLM_ROUTING_ENABLED=false
DEFAULT_MODEL_STRATEGY=cost_optimized
MODEL_SIMPLE=gpt-3.5-turbo
MODEL_MEDIUM=claude-sonnet-4.5
MODEL_COMPLEX=claude-opus-4
ROUTING_COMPLEXITY_THRESHOLD_MEDIUM=3
ROUTING_COMPLEXITY_THRESHOLD_COMPLEX=7
ROUTING_TOKEN_THRESHOLD_LARGE=5000
ROUTING_FALLBACK_MODEL=gpt-4

# Guards
BUDGET_HARD_STOP_THRESHOLD=0.9
MAX_STEP_RETRIES=3
MAX_FILE_EDITS_PER_STEP=5
MAX_REPLAN_ATTEMPTS=2
STALL_TIMEOUT_MINUTES=30
